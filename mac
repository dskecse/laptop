#!/bin/sh

fancy_echo() {
  _fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$_fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# Determine Homebrew prefix
arch="$(uname -m)" # currently x86_64
if [ "$arch" = "arm64" ]; then
  HOMEBREW_PREFIX="/opt/homebrew"
else
  HOMEBREW_PREFIX="/usr/local"
fi

update_shell() {
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != "/bin/zsh" ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

# Check architecture
if [ "$arch" = "arm64" ]; then
  # Check to see if Rosetta is already installed
  if ! pkgutil --pkg-info=com.apple.pkg.RosettaUpdateAuto > /dev/null 2>&1 ; then
    fancy_echo "Installing Rosetta2 ..."
    softwareupdate --install-rosetta --agree-to-license
  else
    fancy_echo "Rosetta is installed"
  fi
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    export PATH="$HOMEBREW_PREFIX/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force

# FYI: macOS 15 arm64 runner image already contains `awscli` formula installed
# See https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md#tools
# Currently depends on `python@3.12`
# brew install --overwrite python@3.12
# brew install --overwrite awscli

# No need for a specific version of Python, always have Homebrew's `python3` in your `PATH`
# FYI: As of Oct 8, 2024 `python3` is aliased to `python@3.13`
# See https://github.com/Homebrew/homebrew-core/blob/master/Aliases/python3
# brew install --overwrite python3

brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"

# Unix
brew "git"
brew "openssl"
brew "rcm"
# Starting w/ Big Sur, it's recommended to use "launchctl asuser ..." instead:
# https://github.com/ChrisJohnsen/tmux-MacOSX-pasteboard/issues/78
# brew "reattach-to-user-namespace" # for copy-paste with tmux
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watch" # to execute a program periodically and show the output, can be ignored
brew "zsh"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick" # to crop and resize images

# Programming language prerequisites and package managers
brew "jemalloc"
brew "libyaml" # should come after OpenSSL
brew "coreutils"
brew "readline" # Ruby 3.3+ now uses Ruby-based reline instead
brew "node"
brew "yarn"

# Databases
brew "postgresql@17", restart_service: :changed
brew "redis", restart_service: :changed
EOF

brew install chruby
# shellcheck disable=SC1091
. "$HOMEBREW_PREFIX/opt/chruby/share/chruby/chruby.sh"

if [ ! -d "$HOME/.rubies" ]; then
  # https://www.ruby-lang.org/en/documentation/installation/#chruby
  brew install ruby-install

  ruby-install --update

  fancy_echo "Configuring Ruby ..."
  find_latest_ruby() {
    # https://github.com/postmodern/ruby-install/blob/master/share/ruby-install/ruby-versions.sh#L83
    tail -1 "$HOME/.cache/ruby-install/ruby/stable.txt"
  }

  ruby_version="$(find_latest_ruby)"
  if ! chruby | grep -Fq "$ruby_version"; then
    # https://github.com/postmodern/ruby-install?tab=readme-ov-file#synopsis
    # https://github.com/postmodern/ruby-install/blob/master/share/ruby-install/ruby-install.sh#L33
    # FYI: This will download the source code into ~/.cache/ruby-install/ rather than ~/src/.
    # The "--with-opt-dir=$HOMEBREW_PREFIX/opt/jemalloc" option fixes the following error:
    #
    #   checking for jemalloc/jemalloc.h... no
    #   checking for jemalloc.h... no
    #   configure: error: jemalloc requested but not found
    #   checking for jemalloc library... no
    #   !!! Configuration of ruby 3.4.1 failed!
    #
    ruby-install --no-reinstall \
                 --src-dir "$HOME/.cache/ruby-install" \
                 --install-dir "$HOME/.rubies/ruby-$ruby_version" \
                 --cleanup \
                 ruby "$ruby_version" -- \
                 "--with-openssl-dir=$HOMEBREW_PREFIX/opt/openssl" \
                 "--with-opt-dir=$HOMEBREW_PREFIX/opt/readline:$HOMEBREW_PREFIX/opt/libyaml:$HOMEBREW_PREFIX/opt/gdbm:$HOMEBREW_PREFIX/opt/jemalloc" \
                 "--with-jemalloc"
  fi

  fancy_echo "Setting default Ruby ..."
  echo "$ruby_version" > "$HOME/.ruby-version"
  # https://batsov.com/articles/2022/09/15/reload-zsh-configuration/
  # shellcheck disable=SC1091
  . "$HOME/.zshrc"
  # After installing new Rubies, one must restart the shell before chruby can recognize them.
  # https://github.com/postmodern/chruby#rubies-1
  # chruby "$ruby_version" # won't work, only sets shell's $RUBY_VERSION to default Ruby

  # Mimic shell restart
  export RUBY_VERSION="$ruby_version"
  # export RUBYOPT=
  export RUBY_ENGINE=ruby
  export RUBY_ROOT="$HOME/.rubies/ruby-$ruby_version"
  export PATH="$RUBY_ROOT/bin:$PATH"
  export GEM_HOME="$HOME/.gem/$RUBY_ENGINE/$RUBY_VERSION"
  export GEM_ROOT="$RUBY_ROOT/lib/ruby/gems/$RUBY_VERSION"
  export GEM_PATH="$GEM_HOME:$GEM_ROOT"
  export PATH="$GEM_HOME/bin:$GEM_ROOT/bin:$PATH"
fi

fancy_echo "Updating RubyGems ..."
gem update --system
fancy_echo "Installing Bundler ..."
gem install bundler
fancy_echo "Configuring Bundler ..."
# FYI: "nproc" is not installed by default, comes from "coreutils"
number_of_cores=$(nproc)
bundle config --global jobs $((number_of_cores - 1))
# https://bundler.io/v2.6/man/bundle-config.1.html
bundle config --global path ".bundle"
bundle config --global without production
# https://github.com/brianmario/mysql2#general-instructions
# https://github.com/brianmario/mysql2#mac-os-x
# bundle config --global build.mysql2 -- \
#   --with-mysql-dir="$HOMEBREW_PREFIX/opt/mysql" --with-openssl-dir="$HOMEBREW_PREFIX/opt/openssl"

# brew tap homebrew/bundle

fancy_echo "Installing oh-my-zsh ..."
if [ ! -d "$HOME/.oh-my-zsh/" ]; then
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

# In the past it was necessary to install Apple's XCode IDE to get
# basic tools like GCC, Git and Subversion on your machine, but
# nowadays there is a slim solution by just installing the command line tools
# FYI: macOS 15 arm64 runner image already contains XCode command line tools installed
# See https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md#tools
if ! xcode-select -p > /dev/null 2>&1 ; then
  fancy_echo "Installing XCode CLT  ..."
  xcode-select --install
fi

# FYI: macOS 15 arm64 runner image already contains `go` formula installed
# See https://github.com/actions/runner-images/blob/main/images/macos/macos-15-arm64-Readme.md#go
if ! brew list -1 | grep ^go$ ; then
  fancy_echo "Installing Go ..."
  brew install go
fi

brew bundle --file=- <<EOF
brew 'duff'
brew 'jq'
brew 'yq'
brew 'gist'
brew 'graphviz'
brew 'nmap'
brew 'tig'
brew 'dos2unix'
brew 'httpie'
brew 'shellcheck'
brew 'cloc'

brew 'wasmtime'

# https://nokogiri.org/tutorials/installing_nokogiri.html#installing-native-gems
# brew 'libxml2'
# brew 'libxslt'

cask 'iterm2'

brew 'java'

# Moved away from using no longer maintained 'elastic/tap':
# https://github.com/elastic/homebrew-tap/pull/126#issuecomment-1059264078
# tap 'dskecse/tap'
# brew 'elasticsearch-full@7.17'
# brew 'kibana-full@7.17'

# brew 'kafka'

# cask 'emacs'
# cask 'mozart2'

# brew 'elixir@1.14'

# FYI: Emacs comes w/ its own ctags, so this should be installed and linked after emacs.
# Currently fails:
#   Possible conflicting files are:
#   /usr/local/bin/ctags -> /Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_11/ctags
brew "universal-ctags" # index files for vim tab completion of methods, classes, variables

# Set up minimal Python3 development environment
cask 'google-cloud-sdk'

brew 'ghc'
brew 'cabal-install'

brew 'leiningen'
tap 'clojure/tools'
brew 'clojure'

tap 'unused-code/formulae'
brew 'unused'

tap 'hashicorp/tap'
brew 'hashicorp/tap/vault'

tap 'mongodb/brew'
# Currently fails:
#   https://github.com/dskecse/laptop/actions/runs/7512692042/job/20453646915
# brew 'mongodb-community'
# TODO: Try uninstalling mongodb-community@5.0 first!

cask 'firefox'
# cask 'chromedriver' # FYI: A binary already exists in the system somehow.

cask 'ngrok'
cask 'wireshark'

cask 'dropbox'
# Specific version due to client-server compatibility issue
# brew 'kubernetes-cli@1.25'
brew 'kubernetes-cli'
brew 'kind'
brew 'helm'
# brew 'minikube'

# FYI: Docker Desktop starting w/ 4.25.0 no longer supports macOS Big Sur (11.7.10):
#
#   You can't use this version of the application "Docker" with this version of macOS.
#   You have macOS 11.7.10. The application requires macOS 12.0 or later.
#
# As per https://docs.docker.com/desktop/install/mac-install/:
#
#   Docker supports Docker Desktop on the most recent versions of macOS.
#   That is, the current release of macOS and the previous 2 releases.
#
# Up-to-date macOS versions list: https://support.apple.com/en-us/HT201260#latest
# Docker release notes: https://docs.docker.com/desktop/release-notes/
#
cask 'docker'

cask 'tunnelbear'
cask 'openvpn-connect'
cask 'cyberduck' # upload media to S3 buckets

# FYI: Requires tmux.
# https://evilmartians.com/chronicles/introducing-overmind-and-hivemind
brew 'overmind'

# Get set for native app development
# brew 'cocoapods'
# brew 'watchman'

brew 'gpg2'

# To get rid of "gpg: problem with the agent: Inappropriate ioctl for device"
# http://support.gpgtools.org/discussions/problems/42548-passphrase-window-not-shown
brew 'pinentry-mac'

# To only ever launch one instance of gpg agent and share the agents across
# every shell
# http://nullprogram.com/blog/2012/06/08/
brew 'keychain'

brew 'lame'
brew 'ffmpeg'
cask 'handbrake'

# brew 'postgis'

cask 'postico'

cask 'fliqlo'
EOF

# To get rid of "error: could not run gpg." w/ git-commit
ln -sf /usr/local/bin/gpg2 /usr/local/bin/gpg

if [ ! -d "$HOME/.vim/" ]; then
  git clone https://github.com/dskecse/dotvim.git ~/.vim
  ln -sf ~/.vim/vimrc ~/.vimrc
fi

# if [ ! -d "$HOME/.aws" ]; then
  # aws configure
  # AWS Access Key ID [None]:
  # EOF when reading a line
# fi

gems_credentials_file="$HOME/.local/share/gem/credentials"
if [ ! -f "$gems_credentials_file" ]; then
  mkdir -p "$(dirname "$gems_credentials_file")"

  # Uses a new RubyGems POST /api/v1/api_key endpoint to create an API key.
  # https://guides.rubygems.org/api-key-scopes/#migration-from-legacy-api-key
  # Same as interactive `gem signin`, which creates ~/.local/share/gem/credentials
  # requires the password from stdin, removes the line ":status: :ok" matching "status"
  curl -u "$USER" -X POST -d "name=api-key&index_rubygems=true" \
    https://rubygems.org/api/v1/api_key.yaml | sed '/status/d' > "$gems_credentials_file"
  chmod 0600 "$gems_credentials_file"
fi
