#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

case "$SHELL" in
  */zsh) : ;;
  *)
    fancy_echo "Changing your shell to zsh ..."
      chsh -s "$(which zsh)"
    ;;
esac

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update

brew_install_or_upgrade 'git'
brew_install_or_upgrade 'postgres'
brew_launchctl_restart 'postgresql'
brew_install_or_upgrade 'redis'
brew_launchctl_restart 'redis'
brew_install_or_upgrade 'the_silver_searcher'
brew_install_or_upgrade 'vim'
brew_install_or_upgrade 'ctags' # index files for vim tab completion of methods, classes, variables
brew_install_or_upgrade 'tmux'
brew_install_or_upgrade 'reattach-to-user-namespace' # for copy-paste and RubyMotion compatibility with tmux
brew_install_or_upgrade 'imagemagick' # to crop and resize images
brew_install_or_upgrade 'watch' # to execute a program periodically and show the output, can be ignored
brew_install_or_upgrade 'gh'
brew_install_or_upgrade 'node'
brew_install_or_upgrade 'yarn'

if [ ! -d "$HOME/.rbenv" ]; then
  fancy_echo "Installing rbenv ..."
    git clone https://github.com/sstephenson/rbenv.git "$HOME/.rbenv"

    # FYI: All this is done by the oh-my-zsh rbenv plugin.
    # append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    # append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    # export PATH="$HOME/.rbenv/bin:$PATH"
    # eval "$(rbenv init - zsh)"
fi

ruby_build_path="$HOME/.rbenv/plugins/ruby-build"

if [ -d "$ruby_build_path" ]; then
  fancy_echo "Updating to latest ruby-build..."
  cd "$ruby_build_path" && git pull && cd -
else
  fancy_echo "Installing ruby-build..."
  git clone https://github.com/sstephenson/ruby-build.git "$ruby_build_path"
fi

# system dependencies for Ruby builds
brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force
brew_install_or_upgrade 'libyaml'

ruby_version=3.1.0

if ! rbenv versions | grep -Fq "$ruby_version"; then
  rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"

gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
  number_of_cores=$(sysctl -n hw.ncpu)
  bundle config --global jobs $((number_of_cores - 1))

brew_install_or_upgrade 'heroku-toolbelt' # heroku cli + foreman

if ! command -v rcup >/dev/null; then
  brew tap thoughtbot/formulae
  brew_install_or_upgrade 'rcm'
fi

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
