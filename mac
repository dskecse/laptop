#!/bin/sh

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    # append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1
    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force

brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
# tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "heroku/brew"

# Unix
brew "universal-ctags", args: ["HEAD"] # index files for vim tab completion of methods, classes, variables
brew "git"
# system dependencies for Ruby builds
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace" # for copy-paste and RubyMotion compatibility with tmux
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watch" # to execute a program periodically and show the output, can be ignored
brew "zsh"

# Heroku
brew "heroku/brew/heroku" # heroku cli + foreman

# GitHub
brew "hub"

# Image manipulation
brew "imagemagick" # to crop and resize images

# Programming languages and package managers
brew "libyaml" # should come after OpenSSL
brew "coreutils"
brew "node"
brew "yarn"

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
EOF

if [ ! -d "$HOME/.rbenv" ]; then
  fancy_echo "Installing rbenv ..."
    git clone https://github.com/sstephenson/rbenv.git "$HOME/.rbenv"

    # FYI: All this is done by the oh-my-zsh rbenv plugin.
    # append_to_zshrc 'export PATH="$HOME/.rbenv/bin:$PATH"'
    # append_to_zshrc 'eval "$(rbenv init - zsh --no-rehash)"' 1

    # export PATH="$HOME/.rbenv/bin:$PATH"
    # eval "$(rbenv init - zsh)"
fi

ruby_build_path="$HOME/.rbenv/plugins/ruby-build"

if [ -d "$ruby_build_path" ]; then
  fancy_echo "Updating to latest ruby-build..."
  cd "$ruby_build_path" && git pull && cd -
else
  fancy_echo "Installing ruby-build..."
  git clone https://github.com/sstephenson/ruby-build.git "$ruby_build_path"
fi

fancy_echo "Configuring Ruby ..."
find_latest_ruby() {
  rbenv install -l | grep -v - | tail -1 | sed -e 's/^ *//'
}

ruby_version="$(find_latest_ruby)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  # use constant from dotfiles exports
  RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl" rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

if [ -f "$HOME/.laptop.local" ]; then
  . "$HOME/.laptop.local"
fi
