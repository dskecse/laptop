#!/bin/sh

fancy_echo() {
  _fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$_fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

update_shell() {
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    /bin/bash -c \
      "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    export PATH="/usr/local/bin:$PATH"
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force

# No need for a specific version of Python, always have Homebrew's `python3` in your `PATH`
brew install --overwrite python3

which chromedriver
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"

# Unix
brew "git"
# system dependencies for Ruby builds
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace" # for copy-paste and RubyMotion compatibility with tmux
brew "the_silver_searcher"
brew "tmux"
# brew "vim"
brew "watch" # to execute a program periodically and show the output, can be ignored
brew "zsh"

# GitHub
brew "gh"

# Image manipulation
brew "imagemagick" # to crop and resize images

# Programming languages and package managers
brew "libyaml" # should come after OpenSSL
brew "coreutils"
brew "readline"
brew "node"
brew "yarn"

# Databases
brew "postgresql@14", restart_service: :changed
brew "redis", restart_service: :changed
brew "mysql", restart_service: :changed
EOF

brew install chruby
HOMEBREW_PREFIX="/usr/local"
# shellcheck disable=SC1091
. "$HOMEBREW_PREFIX/opt/chruby/share/chruby/chruby.sh"

if [ ! -d "$HOME/.rubies" ]; then
  brew install ruby-build
  # ruby-build --definitions

  fancy_echo "Configuring Ruby ..."
  find_latest_ruby() {
    ruby-build -l | grep -v - | tail -1 | sed -e 's/^ *//'
  }

  ruby_version="$(find_latest_ruby)"
  if ! chruby | grep -Fq "$ruby_version"; then
    RUBY_CONFIGURE_OPTS="--with-openssl-dir=/usr/local/opt/openssl" \
      ruby-build "$ruby_version" "$HOME/.rubies/ruby-$ruby_version"
  fi

  # After installing new Rubies, one must restart the shell before chruby can recognize them.
  # https://github.com/postmodern/chruby#rubies-1
  # chruby "$ruby_version" # set default Ruby
fi

gem install bundler
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

# brew tap homebrew/bundle

if [ ! -d "$HOME/.oh-my-zsh/" ]; then
  sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
fi

# In the past it was necessary to install Apple's XCode IDE to get
# basic tools like GCC, Git and Subversion on your machine, but
# nowadays there is a slim solution by just installing the command line tools
# xcode-select --install

which chromedriver
brew bundle --file=- <<EOF
# brew 'awscli' # fails due to not being able to link properly
brew 'duff'
brew 'jq'
brew 'yq'
brew 'gist'
brew 'graphviz'
brew 'nmap'
brew 'tig'
brew 'dos2unix'
brew 'httpie'

brew 'wasmtime'

# http://stackoverflow.com/questions/9134423/os-x-lion-attempting-nokogiri-install-libxml2-is-missing
# http://www.nokogiri.org/tutorials/installing_nokogiri.html
brew 'libxml2'
brew 'libxslt'

tap 'homebrew/cask-versions'
cask 'iterm2'

# brew 'go'
# Error: The "brew link" step did not complete successfully
# The formula built, but is not symlinked into /usr/local
# Could not symlink bin/go

brew 'java'

tap 'elastic/tap'
# TODO: Uncomment once https://github.com/elastic/homebrew-tap/issues/146 is addressed
# brew 'elasticsearch-full'
# brew 'kibana-full'

brew 'kafka'

# cask 'emacs'
tap 'dskecse/tap'
# cask 'mozart2'
brew 'elixir@1.14'

# FYI: Emacs comes w/ its own ctags, so this should be installed and linked after emacs.
brew "universal-ctags" # index files for vim tab completion of methods, classes, variables

# TODO: set up python development environment
brew 'libsass'
cask 'google-cloud-sdk'
# brew 'jupyterlab'

brew 'ghc'
brew 'cabal-install'

brew 'leiningen'
tap 'clojure/tools'
brew 'clojure'

tap 'unused-code/formulae'
brew 'unused'

# tap 'mongodb/brew'
# brew 'mongodb-community'

cask 'firefox'
cask 'chromedriver'

cask 'ngrok'
cask 'wireshark'

cask 'dropbox'
# Specific version due to client-server compatibility issue
# brew 'kubernetes-cli@1.25'
brew 'kubernetes-cli'
brew 'kind'
brew 'helm'
# brew 'minikube'
cask 'docker'
cask 'tunnelbear'
cask 'cyberduck' # upload media to S3 buckets

# FYI: Requires tmux.
# https://evilmartians.com/chronicles/introducing-overmind-and-hivemind
brew 'overmind'

# Get set for native app development
# brew 'cocoapods'
# brew 'watchman'

brew 'gpg2'

# To get rid of "gpg: problem with the agent: Inappropriate ioctl for device"
# http://support.gpgtools.org/discussions/problems/42548-passphrase-window-not-shown
brew 'pinentry-mac'

# To only ever launch one instance of gpg agent and share the agents across
# every shell
# http://nullprogram.com/blog/2012/06/08/
brew 'keychain'

brew 'lame'
brew 'ffmpeg'
cask 'handbrake'

# brew 'postgis'

cask 'postico'

# cask 'fliqlo'
EOF

# To get rid of "error: could not run gpg." w/ git-commit
ln -sf /usr/local/bin/gpg2 /usr/local/bin/gpg

if [ ! -d "$HOME/.vim/" ]; then
  git clone https://github.com/dskecse/dotvim.git ~/.vim
  ln -sf ~/.vim/vimrc ~/.vimrc
fi

# if [ ! -d "$HOME/.aws" ]; then
  # aws configure
  # AWS Access Key ID [None]:
  # EOF when reading a line
# fi

if [ ! -f "$HOME/.gem/credentials" ]; then
  mkdir -p ~/.gem

  curl -u "$USER" https://rubygems.org/api/v1/api_key.yaml > ~/.gem/credentials
  chmod 0600 ~/.gem/credentials
fi
